import{h,k as b}from"../../assets/index-chunk.js";import{t as d}from"../../assets/index-chunk3.js";import{n as r}from"../../assets/index-chunk2.js";import{g,a as x}from"../../utils/string-utils.js";import{c as k}from"../../utils/lightdom-utils.js";import{p}from"../../assets/index-chunk4.js";import{s as f}from"../../assets/index-chunk5.js";import"../icon/gator/icon.gator.js";import"../icon/gator/templates/balloons.js";import"../icon/gator/templates/exit-circle.js";import"../icon/gator/templates/info.js";import"../icon/gator/templates/warning.js";import"../icon/gator/templates/check-circle.js";import"../icon/gator/templates/restricted.js";import"../icon/gator/templates/checkbox.js";import"../icon/gator/templates/checkbox-selected.js";import"../icon/gator/templates/radio.js";import"../icon/gator/templates/radio-selected.js";import"../icon/icon-registry.js";const m=":root,:host{--ngc-checkbox-title-color-default: var(--color-text-primary-base);--ngc-checkbox-title-color-disabled: var(--color-text-disabled);--ngc-checkbox-icon-color-focus: var(--color-icon-brand);--ngc-checkbox-icon-color-hover: var(--color-icon-brand);--ngc-checkbox-icon-color-selected: var(--color-icon-brand);--ngc-checkbox-icon-color-unselected: var(--color-neutral-40);--ngc-checkbox-icon-color-disabled: var(--color-icon-disabled);--ngc-checkbox-icon-color-error: var(--color-icon-error);--ngc-checkbox-focus-border-color: var(--color-icon-brand);--ngc-checkbox-focus-border: var(--size-stroke-1, 1px) solid var(--ngc-checkbox-focus-border-color);--ngc-checkbox-icon-spacing: var(--spacing-padding-margin-4);--ngc-checkbox-title-font-size: var(--text-size-body-1, 1.0625rem);--ngc-checkbox-title-line-height: var(--text-line-height-body-1, 1.5rem)}",v='.gator-checkbox{display:flex;width:fit-content;flex-direction:row;align-items:center}.gator-checkbox-icon{display:flex;flex-direction:column;justify-content:center;margin-right:var(--ngc-checkbox-icon-spacing);color:var(--ngc-checkbox-icon-color-unselected)}.gator-checkbox-icon ngc-icon{--ngc-icon-display: flex}.gator-checkbox-title{font-feature-settings:"liga" off,"clig" off;font-style:normal;font-weight:400;font-family:var(--text-family-sans-serif, "Open Sans");color:var(--ngc-checkbox-title-color-default);font-size:var(--ngc-checkbox-title-font-size);line-height:var(--ngc-checkbox-title-line-height)}.gator-checkbox:focus-visible{outline:none}.gator-checkbox:focus-visible ngc-icon{color:var(--ngc-checkbox-icon-color-focus);border:var(--ngc-checkbox-focus-border);border-radius:.25rem}.gator-checkbox:hover:not(.gator-checkbox_disabled){cursor:pointer}.gator-checkbox:hover:not(.gator-checkbox_disabled) ngc-icon{color:var(--ngc-checkbox-icon-color-hover)}.gator-checkbox-title:hover{cursor:inherit}.gator-checkbox_disabled{cursor:not-allowed}.gator-checkbox_disabled ngc-icon{color:var(--ngc-checkbox-icon-color-disabled)}.gator-checkbox_disabled .gator-checkbox-title{color:var(--ngc-checkbox-title-color-disabled)}.gator-checkbox:is([aria-checked=true]):not(.gator-checkbox_disabled):not(.gator-checkbox_error) ngc-icon{color:var(--ngc-checkbox-icon-color-selected)}.gator-checkbox_error ngc-icon{color:var(--ngc-checkbox-icon-color-error)}';var u=Object.defineProperty,y=Object.getOwnPropertyDescriptor,t=(e,i,n,l)=>{for(var c=l>1?void 0:l?y(i,n):i,a=e.length-1,s;a>=0;a--)(s=e[a])&&(c=(l?s(i,n,c):s(c))||c);return l&&c&&u(i,n,c),c};let o=class extends h{constructor(){super(...arguments),this.id="",this.titleText="",this.value="",this.selected=!1,this.disabled=!1,this.hasError=!1,this._randomId=g(),this._labelSlot=null}createRenderRoot(){return this}render(){const e=this.elementId;return b`
			<style>${m}</style>
			<style>${v}</style>
			<style>${p}</style>
			<style>${f}</style>
			<div id="${e}-checkbox" class="gator-checkbox${this.disabled?" gator-checkbox_disabled":""}${this.hasError?" gator-checkbox_error":""}"
				@click=${this.handleClick}
				@keydown=${this.handleKeyDown}
				role="checkbox"
				aria-checked=${this.selected?"true":"false"}
				aria-disabled=${this.disabled?"true":"false"}
				aria-invalid=${this.hasError?"true":"false"}
				tabindex=${this.disabled?"-1":"0"}
			>
				<ngc-icon
					name="${this.selected?"checkbox-selected":"checkbox"}"
					class="gator-checkbox-icon"
				></ngc-icon>
				<label class="gator-checkbox-title">${this.labelContent}</label>
			</div>
		`}get elementId(){return x(this.id,this._randomId)}get labelContent(){if(this._labelSlot)return this._labelSlot;const e=k(this,"label");return e?(this._labelSlot=e,this._labelSlot):this.titleText}handleClick(e){e.preventDefault(),!this.disabled&&(this.selected=!this.selected,this.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:{value:this.value,selected:this.selected}})))}handleKeyDown(e){e.key===" "&&this.handleClick(e)}};t([r({type:String})],o.prototype,"id",2);t([r({type:String,attribute:"title-text"})],o.prototype,"titleText",2);t([r({type:String})],o.prototype,"value",2);t([r({type:Boolean})],o.prototype,"selected",2);t([r({type:Boolean})],o.prototype,"disabled",2);t([r({type:Boolean,attribute:"has-error"})],o.prototype,"hasError",2);o=t([d("ngc-checkbox")],o);export{o as N};
